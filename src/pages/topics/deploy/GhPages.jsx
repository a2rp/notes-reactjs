import React from "react";
import { Styled } from "./styled";

const GhPages = () => {
    return (
        <Styled.Page>
            <Styled.Title>GitHub Pages (gh-pages)</Styled.Title>

            <Styled.Lead>
                <b>GitHub Pages</b> is a free static hosting service built into GitHub. It serves the files
                that you push to a special branch (e.g., <Styled.InlineCode>gh-pages</Styled.InlineCode>) or the
                <Styled.InlineCode>docs/</Styled.InlineCode> folder of your repository. For a Vite + React single-page app (SPA),
                we build the site to <Styled.InlineCode>dist/</Styled.InlineCode> and publish those static files to GitHub Pages.
            </Styled.Lead>

            {/* 1) Key terms */}
            <Styled.Section>
                <Styled.H2>Key Terms (learn these first)</Styled.H2>
                <Styled.List>
                    <li><b>Static hosting:</b> a server that only serves files (HTML/CSS/JS/images). No Node/Express backend.</li>
                    <li><b>SPA (Single-Page App):</b> the server serves a single <Styled.InlineCode>index.html</Styled.InlineCode>; routing happens in the browser via React Router.</li>
                    <li><b>Build:</b> the production-optimized files generated by Vite into <Styled.InlineCode>dist/</Styled.InlineCode>.</li>
                    <li><b>Base path:</b> the sub-directory your app lives under (e.g., <Styled.InlineCode>/my-repo/</Styled.InlineCode> on GitHub Pages).</li>
                    <li><b>basename (React Router):</b> a prop on <Styled.InlineCode>&lt;BrowserRouter&gt;</Styled.InlineCode> telling the router your app’s base path.</li>
                    <li><b>SPA fallback:</b> a copy of <Styled.InlineCode>index.html</Styled.InlineCode> named <Styled.InlineCode>404.html</Styled.InlineCode> so unknown routes still load your SPA.</li>
                    <li><b>CI (Continuous Integration):</b> automated scripts (GitHub Actions) that build and deploy when you push code.</li>
                </Styled.List>
            </Styled.Section>

            {/* 2) When to pick GitHub Pages */}
            <Styled.Section>
                <Styled.H2>When should you use GitHub Pages?</Styled.H2>
                <Styled.List>
                    <li><b>Perfect for:</b> documentation, portfolios, small to medium SPAs, demos.</li>
                    <li><b>Not for:</b> apps needing server-side auth, databases, or custom headers (use Vercel/Netlify/Cloudflare Pages then).</li>
                    <li><b>Cost:</b> free for public repos.</li>
                </Styled.List>
            </Styled.Section>

            {/* 3) Vite setup: base & router */}
            <Styled.Section>
                <Styled.H2>Step 1 — Configure Vite base & Router basename</Styled.H2>
                <Styled.List>
                    <li>
                        If the repo is <Styled.InlineCode>a2rp/notes-reactjs</Styled.InlineCode>, your Pages URL is
                        <Styled.InlineCode>https://a2rp.github.io/notes-reactjs/</Styled.InlineCode>. The base path is{" "}
                        <Styled.InlineCode>/notes-reactjs/</Styled.InlineCode>.
                    </li>
                    <li>
                        Set Vite’s <Styled.InlineCode>base</Styled.InlineCode> so asset URLs are correct in production.
                    </li>
                    <li>
                        Set React Router’s <Styled.InlineCode>basename</Styled.InlineCode> so routes work under the sub-folder.
                    </li>
                </Styled.List>

                <Styled.Pre>
                    {`// vite.config.js
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [react()],
  base: "/notes-reactjs/", // <-- repo name
});`}
                </Styled.Pre>

                <Styled.Pre>
                    {`// src/main.jsx
import { BrowserRouter } from "react-router-dom";
// ...
<BrowserRouter basename="/notes-reactjs">
  <App />
</BrowserRouter>`}
                </Styled.Pre>

                <Styled.Small>
                    For a <b>user/organization site</b> (repo named <Styled.InlineCode>a2rp.github.io</Styled.InlineCode>), the base path is <i>root</i> (<Styled.InlineCode>"/"</Styled.InlineCode>), so you can omit <Styled.InlineCode>base</Styled.InlineCode> and <Styled.InlineCode>basename</Styled.InlineCode>.
                </Styled.Small>
            </Styled.Section>

            {/* 4) SPA fallback */}
            <Styled.Section>
                <Styled.H2>Step 2 — SPA Fallback (404.html)</Styled.H2>
                <Styled.List>
                    <li>
                        GitHub Pages serves <Styled.InlineCode>index.html</Styled.InlineCode> only for the root URL. Deep links like{" "}
                        <Styled.InlineCode>/topics/state/useState-basics</Styled.InlineCode> may 404 unless you provide a fallback.
                    </li>
                    <li>
                        The common solution is to copy <Styled.InlineCode>dist/index.html</Styled.InlineCode> to{" "}
                        <Styled.InlineCode>dist/404.html</Styled.InlineCode> during deployment so the SPA can boot and handle the route.
                    </li>
                </Styled.List>

                <Styled.Pre>
                    {`# simple shell step (used in CI)
cp dist/index.html dist/404.html`}
                </Styled.Pre>
            </Styled.Section>

            {/* 5) Option A: GitHub Actions */}
            <Styled.Section>
                <Styled.H2>Option A — Auto-deploy with GitHub Actions (recommended)</Styled.H2>
                <Styled.List>
                    <li>Every push to <Styled.InlineCode>main</Styled.InlineCode> builds and publishes your site to the <b>Pages</b> environment.</li>
                    <li>Works well with Vite’s hashed assets (cache-friendly).</li>
                </Styled.List>

                <Styled.Pre>
                    {`# .github/workflows/deploy.yml
name: Deploy to GitHub Pages

on:
  push:
    branches: [main]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install
        run: npm ci

      - name: Build
        run: npm run build

      - name: SPA fallback
        run: cp dist/index.html dist/404.html

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: \${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4`}
                </Styled.Pre>

                <Styled.Small>
                    In your repo: <b>Settings → Pages</b> → Source: “GitHub Actions”. GitHub will serve the artifact produced by the workflow.
                </Styled.Small>
            </Styled.Section>

            {/* 6) Option B: gh-pages CLI */}
            <Styled.Section>
                <Styled.H2>Option B — Manual deploy with <code>gh-pages</code> CLI</Styled.H2>
                <Styled.List>
                    <li>Installs a dev dependency that pushes <Styled.InlineCode>dist/</Styled.InlineCode> to a <Styled.InlineCode>gh-pages</Styled.InlineCode> branch.</li>
                    <li>Good for quick demos; CI is better for teams/automation.</li>
                </Styled.List>

                <Styled.Pre>
                    {`# install
npm i -D gh-pages

# package.json (scripts)
{
  "scripts": {
    "predeploy": "npm run build && cp dist/index.html dist/404.html",
    "deploy": "gh-pages -d dist -t true"
  }
}

# run
npm run deploy`}
                </Styled.Pre>

                <Styled.Small>
                    First time only: enable Pages in <b>Settings → Pages</b>, set source to <Styled.InlineCode>gh-pages</Styled.InlineCode> branch.
                </Styled.Small>
            </Styled.Section>

            {/* 7) Custom domain (CNAME) */}
            <Styled.Section>
                <Styled.H2>Custom Domain (optional)</Styled.H2>
                <Styled.List>
                    <li>In <b>Settings → Pages</b>, set your custom domain (e.g., <Styled.InlineCode>notes.ashishranjan.in</Styled.InlineCode>).</li>
                    <li>GitHub will create/update a <Styled.InlineCode>CNAME</Styled.InlineCode> file at build time, or you can place one in <Styled.InlineCode>public/CNAME</Styled.InlineCode>.</li>
                    <li>Update DNS: add a CNAME record pointing to <Styled.InlineCode>a2rp.github.io</Styled.InlineCode>.</li>
                    <li>Wait for HTTPS to finish provisioning.</li>
                </Styled.List>

                <Styled.Pre>
                    {`// public/CNAME
notes.ashishranjan.in`}
                </Styled.Pre>
            </Styled.Section>

            {/* 8) Caching, performance & invalidation */}
            <Styled.Section>
                <Styled.H2>Caching & Performance (what to know)</Styled.H2>
                <Styled.List>
                    <li>
                        <b>Vite hashed assets:</b> files like <Styled.InlineCode>chunk.abc123.js</Styled.InlineCode> let browsers cache forever. New builds get new hashes → automatic invalidation.
                    </li>
                    <li>
                        <b>index.html:</b> avoid aggressive caching here—this file points to the latest hashes. GitHub Pages doesn’t let you set custom headers; rely on hash versioning.
                    </li>
                    <li>
                        <b>Images:</b> prefer import-time asset hashing or put versioned filenames to leverage cache safely.
                    </li>
                </Styled.List>
            </Styled.Section>

            {/* 9) Troubleshooting */}
            <Styled.Section>
                <Styled.H2>Troubleshooting (common issues)</Styled.H2>
                <Styled.List>
                    <li>
                        <b>Blank page after deploy:</b> check <Styled.InlineCode>base</Styled.InlineCode> in <Styled.InlineCode>vite.config.js</Styled.InlineCode> and <Styled.InlineCode>basename</Styled.InlineCode> on <Styled.InlineCode>BrowserRouter</Styled.InlineCode>.
                    </li>
                    <li>
                        <b>Deep link 404s:</b> ensure <Styled.InlineCode>dist/404.html</Styled.InlineCode> exists (copy of <Styled.InlineCode>index.html</Styled.InlineCode>).
                    </li>
                    <li>
                        <b>Assets 404:</b> mismatched base path or forgetting the trailing slash (use <Styled.InlineCode>/repo-name/</Styled.InlineCode>).
                    </li>
                    <li>
                        <b>Old code showing:</b> browser cache; hard refresh, or bump the build (hashes handle this automatically).
                    </li>
                </Styled.List>
            </Styled.Section>

            {/* 10) Do / Don't */}
            <Styled.Section>
                <Styled.H2>Do &amp; Don’t</Styled.H2>
                <Styled.List>
                    <li><b>Do</b> set <Styled.InlineCode>base</Styled.InlineCode> and <Styled.InlineCode>basename</Styled.InlineCode> for project pages.</li>
                    <li><b>Do</b> create <Styled.InlineCode>404.html</Styled.InlineCode> for SPA fallback.</li>
                    <li><b>Do</b> prefer GitHub Actions for automatic, repeatable deploys.</li>
                    <li><b>Don’t</b> expect server features (headers, redirects, SSR) on GitHub Pages.</li>
                    <li><b>Don’t</b> check <Styled.InlineCode>dist/</Styled.InlineCode> into git—always build in CI or locally before deploy.</li>
                </Styled.List>
            </Styled.Section>

            {/* 11) Glossary */}
            <Styled.Section>
                <Styled.H2>Glossary</Styled.H2>
                <Styled.List>
                    <li><b>Artifact:</b> the built files zipped and passed between workflow steps for deployment.</li>
                    <li><b>Runner:</b> the virtual machine that executes your GitHub Actions job.</li>
                    <li><b>Branch:</b> a line of development in git. Pages often uses the <Styled.InlineCode>gh-pages</Styled.InlineCode> branch.</li>
                    <li><b>CNAME:</b> a DNS record mapping your custom domain to <Styled.InlineCode>USERNAME.github.io</Styled.InlineCode>.</li>
                </Styled.List>
            </Styled.Section>

            <Styled.Callout>
                Summary: Build with Vite, set the correct base path, add a 404 fallback for SPAs, and deploy
                via GitHub Actions or the <i>gh-pages</i> CLI. For most React notes sites, this is fast, free, and reliable.
            </Styled.Callout>
        </Styled.Page>
    );
};

export default GhPages;
