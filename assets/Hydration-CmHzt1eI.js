import{j as e}from"./index-BrPsnAZM.js";import{S as n}from"./styled-BR-hYdxY.js";const i=()=>e.jsxs(n.Page,{children:[e.jsx(n.Title,{children:"Hydration"}),e.jsxs(n.Lead,{children:[e.jsx("b",{children:"Hydration"})," is the process where React attaches event handlers and reactivates a server-rendered HTML tree on the client, turning static markup into an interactive app—without re-rendering everything from scratch."]}),e.jsxs(n.Section,{children:[e.jsx(n.H2,{children:"Definition & Purpose"}),e.jsxs(n.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Server-rendered HTML:"})," HTML produced on the server (via SSR or SSG/ISR) and sent to the browser so users see content fast."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Hydration:"}),' React walks the existing DOM, matches it to your component tree, wires up events, and "takes over" UI updates on the client.']}),e.jsxs("li",{children:[e.jsx("b",{children:"Goal:"})," Faster ",e.jsx("em",{children:"first paint"})," (HTML arrives ready) + React interactivity once JS loads."]})]})]}),e.jsxs(n.Section,{children:[e.jsx(n.H2,{children:"Glossary (clear terms)"}),e.jsxs(n.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"SSR (Server-Side Rendering):"})," HTML is rendered per request on the server, then hydrated on the client."]}),e.jsxs("li",{children:[e.jsx("b",{children:"SSG (Static Site Generation):"})," HTML is prebuilt at build time, served as static files, then hydrated."]}),e.jsxs("li",{children:[e.jsx("b",{children:"ISR (Incremental Static Regeneration):"})," static pages that can be refreshed on the server in the background and then hydrated."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Hydration mismatch:"})," when server HTML doesn't match what React expects on the client, causing warnings or re-rendering."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Selective hydration:"})," React 18 can prioritize hydrating parts of the tree that the user interacts with first."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Streaming SSR:"})," server sends HTML in chunks with"," ",e.jsx(n.InlineCode,{children:"<Suspense>"})," fallbacks so the browser can start painting early; hydration continues as code loads."]}),e.jsxs("li",{children:[e.jsx("b",{children:"RSC (React Server Components):"})," components that render on the server and never run on the client. They reduce JS sent to the browser. ",e.jsx("i",{children:"Only Client Components hydrate"}),"."]})]})]}),e.jsxs(n.Section,{children:[e.jsx(n.H2,{children:"How Hydration Works (High Level)"}),e.jsx(n.Pre,{children:`// 1) Server renders HTML (SSR/SSG) and sends it to the browser.
// 2) Browser paints HTML quickly (no JS needed for this step).
// 3) Client JS loads; React matches existing DOM to the component tree.
// 4) React attaches event listeners and prepares for state updates.
// 5) UI becomes interactive without re-creating DOM nodes from scratch.`})]}),e.jsxs(n.Section,{children:[e.jsx(n.H2,{children:"hydrateRoot vs createRoot"}),e.jsxs(n.List,{children:[e.jsxs("li",{children:["Use ",e.jsx(n.InlineCode,{children:"hydrateRoot"})," when the DOM already contains server-rendered HTML to be hydrated."]}),e.jsxs("li",{children:["Use ",e.jsx(n.InlineCode,{children:"createRoot"})," for pure client-only apps (no server HTML to re-use)."]})]}),e.jsx(n.Pre,{children:`// client.js (entry for an SSR/SSG app)
import { hydrateRoot } from "react-dom/client";
import App from "./App";

hydrateRoot(
  document.getElementById("root"),
  <App />,
  {
    onRecoverableError(err) {
      // optional: log hydration recoveries for diagnostics
      console.warn("Recoverable hydration error:", err);
    },
  }
);`}),e.jsxs(n.Small,{children:[e.jsx("b",{children:"Recoverable errors"})," are cases where React can fix a small mismatch without crashing (e.g., whitespace). Log them during QA."]})]}),e.jsxs(n.Section,{children:[e.jsx(n.H2,{children:"Avoiding Hydration Mismatches"}),e.jsxs(n.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Render the same output"})," on server and client for the initial pass. Avoid using"," ",e.jsx(n.InlineCode,{children:"Date.now()"}),","," ",e.jsx(n.InlineCode,{children:"Math.random()"}),", or browser-only APIs during render."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Pass initial data"})," from server to client and reuse it. Don't refetch immediately in a way that changes initial content."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Gate client-only logic"})," behind effects (",e.jsx(n.InlineCode,{children:"useEffect"}),") or environment checks (e.g., ",e.jsx(n.InlineCode,{children:"typeof window"}),")."]})]}),e.jsx(n.Pre,{children:`// Example: serializing initial data into HTML and reusing it on the client
// server.html template (simplified)
<script id="__DATA__" type="application/json">
  {"user":{"name":"Ashish"}}
<\/script>

// client.js
const raw = document.getElementById("__DATA__")?.textContent || "{}";
const initialData = JSON.parse(raw);

hydrateRoot(document.getElementById("root"), <App initialData={initialData} />);`})]}),e.jsxs(n.Section,{children:[e.jsx(n.H2,{children:"Common Pitfalls & How to Fix"}),e.jsxs(n.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:'"Text content does not match server-rendered HTML":'})," ensure deterministic content on both sides; move non-deterministic bits to"," ",e.jsx(n.InlineCode,{children:"useEffect"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Using browser-only APIs during render:"})," do them in an effect, not during server/client render."]}),e.jsxs("li",{children:[e.jsx("b",{children:"useLayoutEffect on the server:"})," it's a no-op on the server and may warn. If you truly need layout work, create a small",e.jsx(n.InlineCode,{children:"useIsomorphicLayoutEffect"})," ","that falls back to ",e.jsx(n.InlineCode,{children:"useEffect"})," ","on the server."]})]}),e.jsx(n.Pre,{children:`// A common pattern to avoid SSR warnings
import React from "react";
export const useIsomorphicLayoutEffect =
  typeof window !== "undefined" ? React.useLayoutEffect : React.useEffect;`})]}),e.jsxs(n.Section,{children:[e.jsx(n.H2,{children:"Streaming SSR & Suspense (Quick View)"}),e.jsxs(n.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Streaming:"}),' server sends HTML in chunks so the browser can start painting sooner; JS continues loading; React hydrates parts as they arrive ("selective hydration").']}),e.jsxs("li",{children:[e.jsx("b",{children:"Suspense boundary:"})," a wrapper that shows a"," ",e.jsx(n.InlineCode,{children:"fallback"})," until children are ready; helps both streaming SSR and client transitions."]})]}),e.jsx(n.Pre,{children:`// In App.jsx (rendered on server and hydrated on client)
import React, { Suspense } from "react";
const ProductList = React.lazy(() => import("./ProductList"));

export default function App() {
  return (
    <Suspense fallback={<div>Loading products…</div>}>
      <ProductList />
    </Suspense>
  );
}`}),e.jsx(n.Small,{children:"With streaming SSR, the server flushes the fallback immediately; the list hydrates when its chunk loads."})]}),e.jsxs(n.Section,{children:[e.jsx(n.H2,{children:"RSC Relation: What Actually Hydrates?"}),e.jsxs(n.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Server Components"})," render on the server and ship zero client JS; they do ",e.jsx("i",{children:"not"})," hydrate."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Client Components"})," (those using state/effects or the"," ",e.jsx(n.InlineCode,{children:'"use client"'})," directive) do hydrate."]}),e.jsx("li",{children:"Mixing them lets you keep heavy logic/server data fetching on the server and hydrate only what's interactive."})]})]}),e.jsxs(n.Section,{children:[e.jsx(n.H2,{children:"Do & Don't"}),e.jsxs(n.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," ensure server and client render the same initial output."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," serialize initial data and reuse it to avoid flashes and mismatches."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," push browser-only work into"," ",e.jsx(n.InlineCode,{children:"useEffect"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," rely on random values or current time during render."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," manipulate the DOM directly before hydration completes."]})]})]}),e.jsxs(n.Callout,{children:[e.jsx("b",{children:"Summary:"})," Hydration reuses server HTML and wires up interactivity. Keep initial renders deterministic, pass initial data, use effects for client-only behavior, and leverage Suspense/streaming for faster first paint with progressive interactivity."]})]});export{i as default};
