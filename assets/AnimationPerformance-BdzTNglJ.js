import{j as e}from"./index-CAccbg1x.js";import{S as i}from"./styled-C1dyAdz9.js";const r=()=>e.jsxs(i.Page,{children:[e.jsx(i.Title,{children:"Animation Performance"}),e.jsxs(i.Lead,{children:["Goal: keep animations ",e.jsx("b",{children:"smooth (≈60 FPS)"}),", ",e.jsx("b",{children:"responsive"}),", and ",e.jsx("b",{children:"efficient"}),". You have ~",e.jsx("b",{children:"16.67ms"})," to produce each frame (1 second / 60 frames). Exceed the budget and users see",e.jsx("i",{children:" jank"})," (stutter)."]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Core Goals"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Smoothness (FPS):"})," Frames Per Second; 60 FPS is a common target on most displays."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Frame budget:"})," Time available to compute a frame (~16.67ms at 60Hz)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Responsiveness:"})," The UI reacts quickly to input; avoid long main-thread blocks."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Efficiency:"})," Minimize CPU/GPU work and memory; save battery on mobile."]})]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"How Browsers Build a Frame"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Style/Recalc:"})," Apply CSS rules to elements and compute final styles."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Layout (reflow):"})," Calculate element sizes/positions. Expensive for large trees."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Paint:"})," Rasterize pixels for layers (colors, borders, text, shadows)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Composite:"})," GPU combines layers into the final image (transforms/opacity can be done here)."]})]}),e.jsxs(i.Small,{children:["Performance rule of thumb: ",e.jsx("b",{children:"Prefer work that can be done in the compositor"})," (transform/opacity), avoid repeated layout/paint per frame."]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Cheap vs. Expensive Properties"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Cheap (compositor-friendly):"})," ",e.jsx(i.InlineCode,{children:"transform"})," (translate/scale/rotate) and ",e.jsx(i.InlineCode,{children:"opacity"}),". These can animate on the GPU without layout/paint."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Expensive:"})," ",e.jsx(i.InlineCode,{children:"top/left/right/bottom"}),", ",e.jsx(i.InlineCode,{children:"width/height"}),",",e.jsx(i.InlineCode,{children:"margin"}),", large ",e.jsx(i.InlineCode,{children:"box-shadow"}),", filters, complex text wrapping. These trigger layout and/or paint each frame."]})]}),e.jsx(i.Pre,{children:`/* BAD: moves via 'left' -> triggers layout each frame */
.mover { position: absolute; left: 0; transition: left 300ms; }
.mover--on { left: 240px; }

/* GOOD: moves via 'transform' -> no layout/paint (usually) */
.mover { transform: translateX(0); transition: transform 300ms; }
.mover--on { transform: translateX(240px); }`})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"CSS vs JavaScript Animations"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"CSS Transitions/Animations:"})," Declarative; when animating transform/opacity, browsers can run them on the compositor thread → very smooth with low scripting overhead."]}),e.jsxs("li",{children:[e.jsx("b",{children:"JavaScript (requestAnimationFrame):"})," Imperative; full control (physics, interrupts), but runs on the main thread; you must keep per-frame work minimal."]})]}),e.jsx(i.Pre,{children:`/* CSS transition: likely compositor-only */
.box { transform: translateY(0); transition: transform 250ms ease; }
.box--enter { transform: translateY(-12px); }

/* JS: requestAnimationFrame loop (keep work tiny) */
function animate(el) {
  let x = 0;
  function tick() {
    x += 2;              // update state
    el.style.transform = \`translateX(\${x}px)\`; // mutate with transform
    if (x < 200) requestAnimationFrame(tick);
  }
  requestAnimationFrame(tick);
}`})]}),e.jsxs(i.Section,{children:[e.jsxs(i.H2,{children:["Compositor Layers, GPU & ",e.jsx("code",{children:"will-change"})]}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Compositor layer:"})," A separate surface the GPU can move/merge without repainting. Elements animating transform/opacity are often promoted to their own layer."]}),e.jsxs("li",{children:[e.jsx("b",{children:"GPU acceleration:"})," The graphics processor applies transforms/opacity faster than CPU-based repaint."]}),e.jsxs("li",{children:[e.jsxs("b",{children:[e.jsx(i.InlineCode,{children:"will-change"}),":"]})," A hint that an element will animate certain properties; the browser may pre-promote to a layer. ",e.jsx("b",{children:"Use sparingly"})," (layers consume memory)."]})]}),e.jsx(i.Pre,{children:`/* Hint the browser, then remove when not needed */
.card:hover {
  will-change: transform; /* or opacity */
  transform: translateZ(0); /* optional nudge; don't overuse */
}`})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Layout Thrashing & Forced Synchronous Layout"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Layout thrashing:"})," Rapidly interleaving ",e.jsx("i",{children:"reads"})," (measure) and ",e.jsx("i",{children:"writes"})," (mutate) that force the browser to recalc layout repeatedly within a frame."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Forced synchronous layout:"})," Reading layout (e.g., ",e.jsx(i.InlineCode,{children:"getBoundingClientRect()"}),") immediately after writes forces the browser to flush pending changes → jank."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Pattern:"})," ",e.jsx("u",{children:"Measure, then mutate"}),". Batch reads together, then batch writes (e.g., inside one",e.jsx(i.InlineCode,{children:"requestAnimationFrame"}),")."]})]}),e.jsx(i.Pre,{children:`// BAD: read after write repeatedly
el.style.width = "200px";
const r = el.getBoundingClientRect(); // forces layout NOW
el.style.height = r.width + "px";

// GOOD: separate read & write phases
const r = el.getBoundingClientRect();         // read
requestAnimationFrame(() => {                 // write later
  el.style.transform = \`translateX(\${r.width}px)\`;
});`})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"The FLIP Technique"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"FLIP:"})," ",e.jsx("i",{children:"First"})," (measure start), ",e.jsx("i",{children:"Last"})," (measure end), ",e.jsx("i",{children:"Invert"})," (apply inverse transform), ",e.jsx("i",{children:"Play"})," (animate to identity)."]}),e.jsxs("li",{children:["Animates via ",e.jsx("b",{children:"transform"})," instead of layout, avoiding reflow on every frame."]})]}),e.jsx(i.Pre,{children:`// Pseudo: FLIP a tile moving to a new grid slot
const first = tile.getBoundingClientRect();   // First
// ... DOM changes that move the tile ...
const last = tile.getBoundingClientRect();    // Last
const dx = first.left - last.left;
const dy = first.top  - last.top;

tile.style.transform = \`translate(\${dx}px, \${dy}px)\`; // Invert
tile.style.transition = "transform 250ms";                // Play
requestAnimationFrame(() => { tile.style.transform = "translate(0,0)"; });`})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Scroll-Linked Effects (Safely)"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Scroll-linked animation:"})," Visuals tied to scroll position (parallax, sticky headers). Keep handlers light; avoid per-pixel layout/paint."]}),e.jsxs("li",{children:["Use ",e.jsx("b",{children:"CSS"})," where possible (",e.jsx(i.InlineCode,{children:"position: sticky"}),",",e.jsx(i.InlineCode,{children:"scroll-snap"}),"). For JS, throttle work and prefer",e.jsx(i.InlineCode,{children:"transform"}),"/",e.jsx(i.InlineCode,{children:"opacity"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Passive listeners:"})," ",e.jsx(i.InlineCode,{children:"addEventListener('scroll', fn, { passive: true })"})," prevents blocking scrolling."]}),e.jsxs("li",{children:[e.jsx("b",{children:"IntersectionObserver:"})," Trigger animations when elements enter the viewport—no scroll polling."]})]}),e.jsx(i.Pre,{children:`// IntersectionObserver: reveal-on-scroll (no scroll handler)
const io = new IntersectionObserver((entries) => {
  for (const e of entries) {
    if (e.isIntersecting) e.target.classList.add("reveal");
  }
});
document.querySelectorAll(".revealable").forEach(el => io.observe(el));

/* CSS */
.revealable { opacity: 0; transform: translateY(12px); transition: transform .3s, opacity .3s; }
.revealable.reveal { opacity: 1; transform: none; }`})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Framer Motion: Performance Tips"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Prefer transform/opacity"})," for animated props; avoid animating layout-affecting CSS."]}),e.jsxs("li",{children:["Limit simultaneous ",e.jsx(i.InlineCode,{children:"layout"})," animations; they may trigger reflow."]}),e.jsxs("li",{children:["Use ",e.jsx(i.InlineCode,{children:"LazyMotion"})," to code-split animation features."]}),e.jsx("li",{children:"Batch exiting/entering elements (AnimatePresence) and keep trees shallow when possible."}),e.jsxs("li",{children:["Respect ",e.jsx(i.InlineCode,{children:"prefers-reduced-motion"})," for accessibility."]})]}),e.jsx(i.Pre,{children:`// Example: transforms only
<motion.div
  initial={{ opacity: 0, scale: 0.96 }}
  animate={{ opacity: 1, scale: 1 }}
  exit={{ opacity: 0, scale: 0.98 }}
  transition={{ duration: 0.2 }}
/>`})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Debugging & Tooling"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Performance panel:"})," Record, then inspect ",e.jsx("i",{children:"scripting"}),", ",e.jsx("i",{children:"rendering"}),", ",e.jsx("i",{children:"painting"})," timelines and long tasks (>50ms)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Layers panel:"})," Ensure frequently animated elements are on their own layer (but not too many)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"FPS meter:"})," Watch for dips below 60; identify spikes when animations start."]})]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Do & Don't"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," animate ",e.jsx(i.InlineCode,{children:"transform"})," and ",e.jsx(i.InlineCode,{children:"opacity"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," batch reads/writes and use ",e.jsx(i.InlineCode,{children:"requestAnimationFrame"})," for JS animations."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," use ",e.jsx(i.InlineCode,{children:"will-change"})," tactically; remove when idle."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," animate layout-affecting properties if you can avoid it."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," interleave layout reads and writes (avoid forced sync layout)."]})]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Glossary"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"FPS:"})," Frames per second—how many images are shown each second."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Main thread:"})," The browser thread that runs JS, layout, and much of rendering work."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Compositor thread:"})," Combines pre-painted layers with transforms/opacity to produce frames."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Layout/Reflow:"})," Computing element sizes/positions after DOM/style changes."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Paint:"})," Rasterizing pixels (colors, text, borders) into layers."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Composite:"})," GPU step that merges layers into the final frame."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Compositor layer:"})," A GPU-managed surface that can move independently without repaint."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Jank:"})," Visible stutter caused by missed frame deadlines."]})]})]}),e.jsxs(i.Callout,{children:["Summary: Animate ",e.jsx("b",{children:"transform/opacity"}),", avoid layout/paint per frame, use ",e.jsx("b",{children:"FLIP"})," and",e.jsx("b",{children:" requestAnimationFrame"})," wisely, and profile with DevTools. Promote to layers ",e.jsx("i",{children:"only"}),"when needed and respect users with reduced-motion preferences."]})]});export{r as default};
