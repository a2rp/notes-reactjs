import{j as e}from"./index-CAccbg1x.js";import{S as s}from"./styled-Cq2i5DdL.js";const n=()=>e.jsxs(s.Page,{children:[e.jsx(s.Title,{children:"Snapshots"}),e.jsxs(s.Lead,{children:[e.jsx("b",{children:"Snapshot testing"})," saves a “frozen” copy of a component's rendered output (or any serializable value) and compares future test runs against it. If the output changes, the test fails—prompting you to review whether the change was intentional."]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Key Definitions"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Snapshot:"})," A stored text representation of a value (often DOM markup) used for future comparisons."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Snapshot file:"})," A ",e.jsx(s.InlineCode,{children:"__snapshots__"})," folder contains ",e.jsx(s.InlineCode,{children:".snap"})," files auto-generated by Jest when using ",e.jsx(s.InlineCode,{children:"toMatchSnapshot()"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Inline snapshot:"})," A snapshot string kept ",e.jsx("i",{children:"inside"})," your test file using"," ",e.jsx(s.InlineCode,{children:"toMatchInlineSnapshot()"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Serializer:"})," A function that tells Jest how to print/format complex values in snapshots (e.g., tidy React DOM, strip noise)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Deterministic test:"})," A test whose output doesn't change randomly between runs (e.g., you've mocked time/randomness)."]})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"When (and When Not) to Use Snapshots"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Good for:"})," small, stable UI fragments; utility output; serialized configs; public component API contracts."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Avoid:"})," snapshotting huge, dynamic trees (too noisy/brittle). Prefer explicit assertions (e.g., “button is disabled,” “alert text is shown”)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Team rule of thumb:"})," a snapshot diff should be easy for a reviewer to scan and understand. If not, prefer targeted assertions."]})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Basic Example (React Testing Library)"}),e.jsx(s.Pre,{children:`// __tests__/Card.test.jsx
import { render } from "@testing-library/react";
import Card from "../Card";

test("Card snapshot", () => {
  const { container } = render(<Card title="Hello" count={3} />);
  // container.firstChild is the root DOM node of <Card />
  expect(container.firstChild).toMatchSnapshot();
});`}),e.jsxs(s.Small,{children:["First run creates a ",e.jsx(s.InlineCode,{children:".snap"}),". Subsequent runs must match—otherwise the test fails with a readable diff."]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Inline Snapshots"}),e.jsx(s.Pre,{children:`// Prefer inline snapshots for tiny, stable outputs
import { render } from "@testing-library/react";
import Badge from "../Badge";

test("Badge inline snapshot", () => {
  const { container } = render(<Badge variant="success">OK</Badge>);
  expect(container.firstChild).toMatchInlineSnapshot(\`
<span class="badge badge-success">
  OK
</span>
\`);
});`}),e.jsx(s.Small,{children:"Inline snapshots keep expectation and stored value side-by-side—great for review."})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Updating Snapshots"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:["If a change is ",e.jsx("b",{children:"intentional"}),", update snapshots via"," ",e.jsx(s.InlineCode,{children:"jest -u"})," (or in watch mode press"," ",e.jsx(s.InlineCode,{children:"u"}),")."]}),e.jsxs("li",{children:["Review diffs carefully. ",e.jsx("b",{children:"Never"})," update snapshots just to “make tests pass” without understanding the change."]}),e.jsx("li",{children:"In CI, keep snapshots committed to the repo so teammates see diffs in PRs."})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Using Serializers (Reduce Noise)"}),e.jsx(s.Pre,{children:`// jest.setup.js
import serializer from "jest-serializer-html"; // example serializer
expect.addSnapshotSerializer(serializer);

// Or write your own:
expect.addSnapshotSerializer({
  test: (val) => typeof val === "string" && val.startsWith("<"),
  print: (val, serialize) => serialize(val.replace(/\\s+data-[^=]+="[^"]*"/g, "")), // strip data-attrs
});`}),e.jsx(s.Small,{children:"Serializers make snapshots cleaner by removing unstable attributes (e.g., random IDs)."})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Make Snapshots Deterministic"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Mock time:"})," ",e.jsx(s.InlineCode,{children:'jest.useFakeTimers(); jest.setSystemTime(new Date("2025-01-01"));'})]}),e.jsxs("li",{children:[e.jsx("b",{children:"Mock randomness:"})," ",e.jsx(s.InlineCode,{children:'jest.spyOn(Math, "random").mockReturnValue(0.1234);'})]}),e.jsxs("li",{children:[e.jsx("b",{children:"Mock environment:"})," isolate locale/timezone if output depends on them."]})]}),e.jsx(s.Pre,{children:`beforeAll(() => {
  jest.useFakeTimers();
  jest.setSystemTime(new Date("2025-01-01T00:00:00Z"));
  jest.spyOn(Math, "random").mockReturnValue(0.5);
});
afterAll(() => {
  jest.useRealTimers();
  jest.restoreAllMocks();
});`})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Alternatives & Complements"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Explicit assertions:"})," Use"," ",e.jsx(s.InlineCode,{children:"@testing-library/jest-dom"})," matchers (e.g.,",e.jsx(s.InlineCode,{children:"toBeDisabled"}),","," ",e.jsx(s.InlineCode,{children:"toHaveTextContent"}),")."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Visual regression:"})," Tools like Percy/Chromatic take ",e.jsx("i",{children:"pixel"})," snapshots across browsers—stronger for CSS/layout changes."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Story-based tests:"})," Snapshot the output of small, stateless stories instead of full app pages."]})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Do & Don't"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," snapshot small, stable pieces of UI."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," keep snapshots readable (use serializers; avoid noise)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," review diffs like production code."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," snapshot entire pages or constantly changing DOM."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," treat snapshot updates as routine; understand the change first."]})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Glossary"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"toMatchSnapshot:"})," Jest matcher that writes/compares a value to a snapshot file."]}),e.jsxs("li",{children:[e.jsx("b",{children:"toMatchInlineSnapshot:"})," Stores the snapshot string directly in the test source."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Serializer:"})," Custom printer that controls how values appear in snapshots."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Diff:"})," The line-by-line change Jest shows when a snapshot no longer matches."]})]})]}),e.jsx(s.Callout,{children:"Snapshot testing is great for catching unexpected changes in small, stable outputs. Keep snapshots tidy and deterministic, prefer explicit assertions for behavior, and review diffs with the same care as production code."})]});export{n as default};
