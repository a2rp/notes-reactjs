import{j as e}from"./index-DUO2rjrc.js";import{S as s}from"./styled-CBN73NgU.js";const r=()=>e.jsxs(s.Page,{children:[e.jsx(s.Title,{children:"Cloudflare Pages (CF Pages)"}),e.jsxs(s.Lead,{children:[e.jsx("b",{children:"Cloudflare Pages"})," is a globally distributed static hosting platform. It serves your"," ",e.jsx(s.InlineCode,{children:"dist/"})," build from edge locations, giving very low latency worldwide. For React + Vite, it's a great “push-to-deploy” choice with ",e.jsx("b",{children:"Preview Deploys"}),","," ",e.jsx("b",{children:"Branch Deploys"}),", and optional ",e.jsx("b",{children:"Pages Functions"})," for serverless logic."]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Core Definitions"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Static hosting:"})," Serving pre-built files (HTML, JS, CSS, assets) directly, without a traditional server."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Edge network (CDN):"})," A global network of data centers. Your files are cached close to users for faster loads."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Build command:"})," The script that generates production assets (for Vite:"," ",e.jsx(s.InlineCode,{children:"npm run build"}),")."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Build output directory:"})," Where the build lands (for Vite:"," ",e.jsx(s.InlineCode,{children:"dist"}),")."]}),e.jsxs("li",{children:[e.jsx("b",{children:"SPA fallback:"})," A rule so unknown paths (e.g. ",e.jsx(s.InlineCode,{children:"/about"}),") serve"," ",e.jsx(s.InlineCode,{children:"index.html"})," for client-side routing."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Preview Deploy:"})," A per-pull-request environment so you can test changes before merging."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Branch Deploy:"})," Auto deploys for specific branches (e.g., ",e.jsx(s.InlineCode,{children:"main"}),","," ",e.jsx(s.InlineCode,{children:"develop"}),")."]})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"One-Time Setup (GitHub → CF Pages)"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"1. Prepare project:"})," Ensure it builds locally.",e.jsx(s.Pre,{children:`# package.json scripts
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  }
}`})]}),e.jsxs("li",{children:[e.jsx("b",{children:"2. Push to GitHub:"})," Your repo should contain ",e.jsx(s.InlineCode,{children:"package.json"})," and"," ",e.jsx(s.InlineCode,{children:"vite.config.[js|ts]"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"3. Create CF Pages project:"})," In the Cloudflare dashboard → Pages → ",e.jsx("i",{children:"Create a project"})," →"," ",e.jsx("i",{children:"Connect to Git"})," → select your repo."]}),e.jsxs("li",{children:[e.jsx("b",{children:"4. Configure build:"})," Build command = ",e.jsx(s.InlineCode,{children:"npm run build"})," · Output dir ="," ",e.jsx(s.InlineCode,{children:"dist"})," · Node version = your project's LTS is fine."]}),e.jsxs("li",{children:[e.jsx("b",{children:"5. Deploy:"})," CF Pages will install deps, run the build, and deploy to a"," ",e.jsx(s.InlineCode,{children:"*.pages.dev"})," URL. Merges to your chosen branch will auto-deploy."]})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Client-Side Routing (SPA Fallback)"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:["For React Router (BrowserRouter), unknown paths must return ",e.jsx(s.InlineCode,{children:"index.html"}),"."]}),e.jsxs("li",{children:["CF Pages supports a ",e.jsx("b",{children:"_redirects"})," file. Add it at the repo root (or place it into"," ",e.jsx(s.InlineCode,{children:"public/"})," so it gets copied to ",e.jsx(s.InlineCode,{children:"dist/"}),")."]})]}),e.jsx(s.Pre,{children:`# _redirects
/*    /index.html   200`}),e.jsxs(s.Small,{children:["This ensures deep links (e.g., ",e.jsx(s.InlineCode,{children:"/notes/react/hooks"}),") load your app rather than a 404 from the CDN."]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Optimal Caching & Headers"}),e.jsx(s.List,{children:e.jsxs("li",{children:["Use a ",e.jsx("b",{children:"_headers"})," file to control caching. Strategy:",e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Immutable assets"})," (hashed filenames in ",e.jsx(s.InlineCode,{children:"dist/assets/*"}),"): cache for a year."]}),e.jsxs("li",{children:[e.jsx("b",{children:"HTML"})," (",e.jsx(s.InlineCode,{children:"index.html"}),"): no-cache, so users always get the latest bundle references."]})]})]})}),e.jsx(s.Pre,{children:`# _headers

# 1) HTML should not be cached aggressively
/index.html
  Cache-Control: no-cache

# 2) Hashed assets can be cached for a long time
/assets/*
  Cache-Control: public, max-age=31536000, immutable`}),e.jsxs(s.Small,{children:["Place ",e.jsx(s.InlineCode,{children:"_headers"})," at the repo root or ensure it's included in the final"," ",e.jsx(s.InlineCode,{children:"dist/"})," (e.g., via ",e.jsx(s.InlineCode,{children:"public/_headers"}),")."]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Redirects & Custom 404"}),e.jsx(s.List,{children:e.jsxs("li",{children:[e.jsx("b",{children:"Redirects:"})," Add more rules to ",e.jsx(s.InlineCode,{children:"_redirects"}),"."]})}),e.jsx(s.Pre,{children:`# _redirects examples

# legacy path to new docs section
/old-docs/*    /docs/:splat    301

# external redirect
/twitter       https://twitter.com/a2rp   302`}),e.jsx(s.List,{children:e.jsxs("li",{children:[e.jsx("b",{children:"404 page:"})," Include ",e.jsx(s.InlineCode,{children:"public/404.html"})," so CF Pages serves a friendly not-found page (your app should still handle SPA routes via the fallback rule above)."]})})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Environment Variables (Per-Environment)"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:["Set environment variables in Pages → ",e.jsx("i",{children:"Settings → Environment Variables"}),"."]}),e.jsxs("li",{children:["Use ",e.jsx(s.InlineCode,{children:"VITE_*"})," prefixes to expose to the client (Vite rule)."]}),e.jsxs("li",{children:["Keep secrets ",e.jsx("i",{children:"without"})," the ",e.jsx(s.InlineCode,{children:"VITE_"})," prefix and consume them only in Pages Functions (server-side) if needed."]})]}),e.jsx(s.Pre,{children:`# Example usage in code (client)
const apiBase = import.meta.env.VITE_API_BASE_URL;

// In CF Pages dashboard:
// VITE_API_BASE_URL = "https://api.example.com" (Production)
// VITE_API_BASE_URL = "https://staging-api.example.com" (Preview)`}),e.jsxs(s.Small,{children:["CF Pages separates ",e.jsx("b",{children:"Production"})," vs ",e.jsx("b",{children:"Preview"})," variables so your PR builds can point to staging services safely."]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Preview & Branch Deploys"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Preview Deploy:"})," Every pull request gets a unique URL. Share it with reviewers for quick checks."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Branch Deploy:"})," Choose which branches auto-deploy (e.g., ",e.jsx(s.InlineCode,{children:"develop"})," ","for staging, ",e.jsx(s.InlineCode,{children:"main"})," for production)."]})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Optional: Pages Functions (Serverless)"}),e.jsx(s.List,{children:e.jsxs("li",{children:["If you need light server logic (auth callbacks, form handlers), add a"," ",e.jsx(s.InlineCode,{children:"functions/"})," directory (edge-runtime). Your app stays mostly static, with only specific routes handled by functions."]})}),e.jsx(s.Pre,{children:`// functions/hello-world.ts
export const onRequestGet: PagesFunction = async () => {
  return new Response("Hello from the edge!", { status: 200 });
};`}),e.jsxs(s.Small,{children:["Keep secrets server-side in functions; never expose them as ",e.jsx(s.InlineCode,{children:"VITE_"})," values."]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Production Monitoring Basics"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Web Analytics:"})," Cloudflare Web Analytics or your preferred privacy-friendly analytics to track page views and performance."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Real User Monitoring (RUM):"})," Track Core Web Vitals (LCP, CLS, INP). Identify slow pages/assets."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Error tracking:"})," Use a client-side tool (e.g., Sentry) to capture JS errors and source maps."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Uptime:"})," External uptime pings on your production URL to catch outages quickly."]})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Do & Don't"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," commit ",e.jsx(s.InlineCode,{children:"_redirects"})," for SPA fallback."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," add ",e.jsx(s.InlineCode,{children:"_headers"})," for strong caching on hashed assets."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," split environment variables for Production vs Preview."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," cache ",e.jsx(s.InlineCode,{children:"index.html"})," aggressively-users won't see new builds."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," expose secrets with a ",e.jsx(s.InlineCode,{children:"VITE_"})," prefix-those go to the client."]})]})]}),e.jsxs(s.Callout,{children:["Summary: For Vite + React, CF Pages is “set it and forget it.” Build to ",e.jsx("b",{children:"dist/"}),", add a SPA fallback via"," ",e.jsx("b",{children:"_redirects"}),", tune caching with ",e.jsx("b",{children:"_headers"}),", separate env vars by environment, and use Preview Deploys to verify changes before shipping."]})]});export{r as default};
