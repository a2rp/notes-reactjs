import{j as e}from"./index-BRArnZ3i.js";import{S as s}from"./styled-UnSJY_Ww.js";const t=()=>e.jsxs(s.Page,{children:[e.jsx(s.Title,{children:"Toast (Non-blocking Notifications)"}),e.jsxs(s.Lead,{children:["A ",e.jsx("b",{children:"toast"})," is a small, transient message that appears on top of the UI to confirm an action, surface a status, or provide lightweight feedback-without interrupting the user's current task. Toasters are ",e.jsx("i",{children:"non-modal"})," (no blocking), disappear automatically, and can stack as a queue."]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"What is a Toast? (Definitions)"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Toast / Snackbar:"})," A brief, dismissible notification. It ",e.jsx("em",{children:"does not"})," block interaction. (Some design systems use “snackbar” for bottom-placed toasts.)"]}),e.jsxs("li",{children:[e.jsx("b",{children:"Non-modal:"})," The UI remains interactive; unlike a ",e.jsx("em",{children:"modal dialog"}),", toasts don't capture focus."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Duration (timeout):"})," The time before auto-dismiss (e.g., 3-6s). Usually pauses on hover."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Placement:"})," Where toasts appear (top-right, bottom-center, etc.)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Variant:"})," Visual/semantic style - ",e.jsx(s.InlineCode,{children:"success"}),","," ",e.jsx(s.InlineCode,{children:"error"}),", ",e.jsx(s.InlineCode,{children:"info"}),","," ",e.jsx(s.InlineCode,{children:"warn"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Queue / Stack:"})," Multiple toasts can be shown together; new ones are added to a queue respecting max visible."]}),e.jsxs("li",{children:[e.jsx("b",{children:"ARIA live region:"})," A screen-reader area that announces toast text automatically (polite vs assertive)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Idempotency / Deduplication:"})," Prevent the same message from showing repeatedly for the same action."]})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"When to Use a Toast"}),e.jsxs(s.List,{children:[e.jsx("li",{children:"Confirming quick actions: “Saved”, “Copied”, “Settings updated”."}),e.jsx("li",{children:"Non-critical errors or warnings that don't require immediate decisions."}),e.jsx("li",{children:"Background task updates: “Export started…”, “Export complete”."})]}),e.jsx(s.Small,{children:"If a decision is required (Yes/No), prefer a dialog. If the message must be read immediately, consider an inline alert or an assertive live region."})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Anatomy"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Container (Toaster):"})," fixed positioned area that holds a stack of toasts."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Toast Card:"})," icon (optional), title, message, close button, progress bar (optional)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Motion:"})," enter/exit animations (slide/fade) - fast and unobtrusive."]})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"A Minimal API Design (Concept)"}),e.jsx(s.Pre,{children:`// Shape idea: a Provider + hook + imperative helpers
// <ToastProvider placement="top-right" maxVisible={3} duration={4000} />

toast.success("Saved!");
toast.error("Failed to save");
toast.info("Connecting...");
toast.loading("Uploading...", { id: "upload-1" });   // can update by id
toast.update("upload-1", { type: "success", message: "Upload complete" });
toast.dismiss("upload-1");                            // or dismiss by id`}),e.jsxs(s.Small,{children:["You're already using ",e.jsx("i",{children:"react-toastify"})," elsewhere. These notes explain the concepts; you can keep using the library or build a custom one if needed."]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Examples (Common User Flows)"}),e.jsx(s.Pre,{children:`// 1) Success after form submit
function onProfileSave() {
  // await api.saveProfile(data)
  // toast.success("Profile updated");
}

// 2) Error pattern with details
function onCheckout() {
  // try { await api.checkout() }
  // catch (err) { toast.error(err.message || "Payment failed"); }
}

// 3) Async task with update
async function exportCsv() {
  // toast.loading("Exporting...", { id: "exp" });
  // const file = await api.exportCsv();
  // toast.update("exp", { type: "success", message: "Export ready" });
}

// 4) Copy to clipboard
async function copyInvite() {
  // await navigator.clipboard.writeText(inviteUrl);
  // toast.info("Link copied");
}`})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Accessibility (A11y) Essentials"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Live Region:"})," Render toast messages in an ",e.jsx(s.InlineCode,{children:"aria-live"})," container. Use ",e.jsx(s.InlineCode,{children:"polite"})," for non-urgent updates;"," ",e.jsx(s.InlineCode,{children:"assertive"})," only for critical alerts."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Focus:"})," Do ",e.jsx("em",{children:"not"})," steal focus for basic toasts. Keep focus where the user is working."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Contrast & Duration:"})," Ensure readable contrast; allow enough time for reading or provide a manual close."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Close button:"})," Always provide a visible dismiss control with an accessible name (e.g., “Close notification”)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Reduced motion:"})," Respect ",e.jsx(s.InlineCode,{children:"prefers-reduced-motion"})," (disable or simplify animations)."]})]}),e.jsx(s.Pre,{children:`// Example: polite live region container (concept)
<div aria-live="polite" aria-atomic="true" role="status">
  {/* Toast items */}
</div>`})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Patterns & Options"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Placement:"})," top-right is common for desktop; bottom-center often works for mobile."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Pause on hover:"})," Suspend countdown while the user reads or interacts."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Deduplicate:"})," Collapse identical consecutive messages to avoid noise."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Max visible:"})," Show at most 3-4 at a time; queue the rest."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Persistent types:"})," Use “sticky” (no auto-dismiss) for critical errors."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Action button:"})," Optional “Undo” or “View” actions - keep secondary and short."]})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Variants"}),e.jsx(s.Pre,{children:`// Suggested variants and semantics:
- success:  Operation completed (green, check icon)
- error:    Operation failed (red, cross icon)
- info:     Neutral information (blue)
- warn:     Cautionary info (amber)
- loading:  In progress (spinner), transitions to success/error`})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Do & Don't"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," keep messages short and specific (“Profile saved”)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," use one toast per action; batch related info."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," ensure toasts don't cover critical controls (adjust placement on small screens)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," use toasts for decisions - use dialogs."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," spam toasts on every keystroke or repeated clicks (debounce/dedupe)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," hide errors instantly; give users time to read and act."]})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Common Pitfalls"}),e.jsxs(s.List,{children:[e.jsx("li",{children:"Missing live region → screen readers don't announce the message."}),e.jsx("li",{children:"Too short duration → users miss the message (especially on slow pages)."}),e.jsx("li",{children:"Stealing focus → breaks keyboard flow and frustrates users."}),e.jsx("li",{children:"Overlapping navbars/footers → wrong z-index or placement."}),e.jsx("li",{children:"Infinite queue → performance jitter; enforce a maximum."})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Testing Strategy"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:["Unit test the ",e.jsx("i",{children:"API surface"})," (e.g., calling ",e.jsx(s.InlineCode,{children:"toast.success"})," adds an item)."]}),e.jsxs("li",{children:["Verify ",e.jsx("i",{children:"duration"})," and ",e.jsx("i",{children:"pause on hover"})," with fake timers."]}),e.jsxs("li",{children:["Check ",e.jsx("i",{children:"announcements"})," by asserting live region text updates."]}),e.jsxs("li",{children:["Ensure ",e.jsx("i",{children:"reducer/store"})," logic handles add/update/dismiss and max-visible correctly."]})]})]}),e.jsx(s.Callout,{children:"Summary: Toasts deliver fast, non-blocking feedback. Keep them short, accessible, respectful of motion preferences, and limited in number. For critical paths, prefer dialogs or inline alerts instead."})]});export{t as default};
