import{j as e}from"./index-CDxhzYTb.js";import{S as i}from"./styled-Drh0cwNW.js";const r=()=>e.jsxs(i.Page,{children:[e.jsx(i.Title,{children:"Code Metrics"}),e.jsxs(i.Lead,{children:[e.jsx("b",{children:"Code metrics"})," are simple numbers that describe your code and its runtime behavior. They help you spot complexity, risky files, large bundles, slow pages, and unnecessary re-renders. Treat them as ",e.jsx("i",{children:"signals"})," to guide refactors—not as strict rules."]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Why care about metrics?"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Predictability:"})," lower complexity → easier reasoning and fewer bugs."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Performance:"})," smaller bundles + fewer re-renders → faster UI."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Focus:"})," metrics reveal ",e.jsx("i",{children:"hotspots"})," where effort brings the biggest wins."]})]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Source-level metrics (static)"}),e.jsx(i.H3,{children:"Lines of Code (LOC / SLOC)"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"LOC:"})," total lines including blanks/comments. ",e.jsx("b",{children:"SLOC:"})," only executable lines."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Use:"})," quick size sense. Large files often hide complexity."]})]}),e.jsx(i.H3,{children:"Cyclomatic Complexity (CC)"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Definition:"})," number of independent paths through code. More branches/early returns → higher CC."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Why it matters:"})," high CC is harder to test and reason about."]})]}),e.jsx(i.Pre,{children:`// CC grows with branching:
function validate(user) {
  if (!user) return false;             // +1 path
  if (!user.email) return false;       // +1 path
  if (user.age < 18) return false;     // +1 path
  return /@/.test(user.email);         // +1 path
}`}),e.jsx(i.Small,{children:"Refactor by extracting helpers or using data-driven checks to reduce branching."}),e.jsx(i.H3,{children:"Cognitive Complexity"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Definition:"})," measures how hard code is to understand for a human (nesting, flow breaks, deep conditions)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Tip:"})," flatten logic, early-return small cases, avoid deep nesting."]})]}),e.jsx(i.H3,{children:"Maintainability Index (MI)"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Definition:"})," combined score based on LOC, complexity, and Halstead metrics. Higher is better."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Use:"})," track trend over time; don't chase a “perfect” value."]})]}),e.jsx(i.H3,{children:"Duplication %"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Definition:"})," portion of code that's repeated."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Fix:"})," extract reusable utilities/components; prefer composition."]})]}),e.jsx(i.H3,{children:"Churn"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Definition:"})," how frequently a file changes (e.g., per week/month)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Signal:"})," high churn + high complexity ⇒ prime refactor candidate."]})]}),e.jsx(i.H3,{children:"Coupling"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Definition:"})," how many other files/modules something depends on (and vice-versa)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Goal:"})," keep components focused; avoid wide “reach” into many folders."]})]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"React-specific signals"}),e.jsx(i.H3,{children:"Re-render Rate"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Definition:"})," how often a component re-renders when state/props/context change."]}),e.jsxs("li",{children:[e.jsx("b",{children:"How to see:"})," React DevTools → Profiler → record interactions."]})]}),e.jsx(i.H3,{children:"Wasted Renders"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Definition:"})," renders that don't produce visible DOM changes."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Reduce:"})," memoize expensive children, stabilize props, split components."]})]}),e.jsx(i.H3,{children:"Memo Hit Ratio"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Definition:"})," % of times ",e.jsx(i.InlineCode,{children:"React.memo"})," or ",e.jsx(i.InlineCode,{children:"useMemo"})," actually avoids work."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Tip:"})," memo only when inputs are stable and the child is expensive to render."]})]}),e.jsx(i.H3,{children:"Prop Drilling Depth"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Definition:"})," how many levels a prop travels down before use."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Fix:"})," lift state closer, use context (sparingly), or localize state."]})]}),e.jsx(i.Pre,{children:`// Wasted renders: unstable inline objects/functions
function List({ items, onPick }) {
  return items.map(item => (
    <Row
      key={item.id}
      style={{ padding: 8 }}            // <- new object each render
      onClick={() => onPick(item.id)}   // <- new fn each render
    />
  ));
}

// Better: hoist stable values
const rowStyle = { padding: 8 };
function ListBetter({ items, onPick }) {
  const handlePick = React.useCallback((id) => onPick(id), [onPick]);
  return items.map(item => (
    <Row key={item.id} style={rowStyle} onClick={() => handlePick(item.id)} />
  ));
}`}),e.jsx(i.Small,{children:"Stabilize props to help memoized children and reduce needless work."})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Bundle & Runtime metrics"}),e.jsx(i.H3,{children:"Bundle Size"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Definition:"})," total KB shipped to the browser for a route."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Tooling:"})," Vite + ",e.jsx("i",{children:"source-map-explorer"})," or ",e.jsx("i",{children:"webpack-bundle-analyzer"}),"."]})]}),e.jsx(i.H3,{children:"Tree Shaking"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Definition:"})," removing unused exports during build."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Tip:"})," prefer ESM imports; avoid wildcard ",e.jsx(i.InlineCode,{children:"import *"})," from large libs."]})]}),e.jsx(i.H3,{children:"Web Vitals"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"LCP (Largest Contentful Paint):"})," time until main content is visible."]}),e.jsxs("li",{children:[e.jsx("b",{children:"CLS (Cumulative Layout Shift):"})," visual stability; lower is better."]}),e.jsxs("li",{children:[e.jsx("b",{children:"TBT (Total Blocking Time):"})," main-thread blocked during load; affects interactivity."]}),e.jsxs("li",{children:[e.jsx("b",{children:"TTI (Time To Interactive):"})," when the page reliably responds to input."]}),e.jsxs("li",{children:[e.jsx("b",{children:"FCP (First Contentful Paint):"})," first pixel of content painted."]})]}),e.jsx(i.Pre,{children:`// Example: dynamic import to cut initial bundle size
const ProductChart = React.lazy(() => import("../charts/ProductChart"));

function Dashboard() {
  return (
    <React.Suspense fallback={<div>Loading chart...</div>}>
      <ProductChart />
    </React.Suspense>
  );
}`}),e.jsx(i.Small,{children:"Code-split heavy widgets; keep the initial route light for better LCP/TTI."})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Test & Quality metrics"}),e.jsx(i.H3,{children:"Coverage"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Definition:"})," % of code executed by tests (lines/branches/functions)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Note:"})," 100% coverage doesn't guarantee quality—cover meaningful paths."]})]}),e.jsx(i.H3,{children:"Lint Rule Violations"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Definition:"})," number/severity of rule hits (e.g., complexity, no-unused-vars, hooks rules)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Goal:"})," keep violations near zero; track new ones in CI to avoid drift."]})]}),e.jsx(i.H3,{children:"Accessibility (a11y) findings"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Definition:"})," issues like missing labels, poor contrast, wrong semantics."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Tooling:"})," eslint-plugin-jsx-a11y, Axe DevTools, Lighthouse a11y score."]})]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"How to measure (common tools)"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"ESLint:"})," enable ",e.jsx(i.InlineCode,{children:"complexity"}),", ",e.jsx(i.InlineCode,{children:"max-lines"}),", ",e.jsx(i.InlineCode,{children:"max-depth"}),", and hooks rules."]}),e.jsxs("li",{children:[e.jsx("b",{children:"SonarJS / SonarQube:"})," cognitive complexity, duplication, hotspots dashboard."]}),e.jsxs("li",{children:[e.jsx("b",{children:"dependency-cruiser:"})," visualize imports; catch circular dependencies."]}),e.jsxs("li",{children:[e.jsx("b",{children:"ts-prune / knip:"})," detect unused exports/dependencies."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Vite + source-map-explorer:"})," inspect bundle composition."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Lighthouse / WebPageTest / Web Vitals:"})," LCP/CLS/TBT/TTI/FCP."]}),e.jsxs("li",{children:[e.jsx("b",{children:"React DevTools Profiler:"})," record interactions and re-render flamegraphs."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Vitest + c8 (Istanbul):"})," coverage reports in CI."]})]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Do & Don't"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," baseline metrics early, then track trends (getting better or worse?)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," tackle ",e.jsx("i",{children:"high-churn + high-complexity"})," files first."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," code-split heavy routes and memoize expensive children."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," optimize blindly—measure first, then change."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," chase perfect scores; ship incremental improvements."]})]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Mini checklist (React app)"}),e.jsxs(i.List,{children:[e.jsx("li",{children:"CC ≤ 10 per function where reasonable; extract helpers if higher."}),e.jsx("li",{children:"Large components (>200 SLOC) → split by concern (view, data, item)."}),e.jsx("li",{children:"Memoize expensive children; stabilize props to reduce wasted renders."}),e.jsx("li",{children:"Keep initial route bundle lean; lazy-load charts/editors/modals."}),e.jsx("li",{children:"Track Web Vitals in CI; investigate regressions immediately."})]})]}),e.jsx(i.Callout,{children:"Summary: Use metrics to find the 20% of code causing 80% of pain. Measure, refactor in small steps, and keep your React UI fast, predictable, and easy to change."})]});export{r as default};
