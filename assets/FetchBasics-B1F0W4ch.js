import{j as e}from"./index-UhLb6G-I.js";import{S as s}from"./styled-CIy6Sw_o.js";const i=()=>e.jsxs(s.Page,{children:[e.jsx(s.Title,{children:"Fetch Basics"}),e.jsxs(s.Lead,{children:["The ",e.jsx("b",{children:"Fetch API"})," is the browser's built-in, promise-based way to request data over HTTP. You call ",e.jsx(s.InlineCode,{children:"fetch(url, options?)"})," to get a"," ",e.jsx(s.InlineCode,{children:"Response"}),", then parse it with"," ",e.jsx(s.InlineCode,{children:"response.json()"}),","," ",e.jsx(s.InlineCode,{children:"response.text()"}),", etc. Fetch works with standard web concepts: ",e.jsx("i",{children:"URL"}),", ",e.jsx("i",{children:"method"}),", ",e.jsx("i",{children:"headers"}),", ",e.jsx("i",{children:"body"}),", and",e.jsx("i",{children:"status codes"}),"."]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:'What is "fetch"? Why use it?'}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Fetch API:"})," a browser API for making network requests that returns a"," ",e.jsx(s.InlineCode,{children:"Promise"})," resolving to a"," ",e.jsx(s.InlineCode,{children:"Response"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"HTTP request:"})," a message you send to a server with a"," ",e.jsx(s.InlineCode,{children:"method"})," (GET/POST/PUT/DELETE…),"," ",e.jsx(s.InlineCode,{children:"URL"}),", optional"," ",e.jsx(s.InlineCode,{children:"headers"})," and a"," ",e.jsx(s.InlineCode,{children:"body"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"HTTP response:"})," server's reply containing a"," ",e.jsx(s.InlineCode,{children:"status"})," (200, 404, 500…),"," ",e.jsx(s.InlineCode,{children:"headers"}),", and a"," ",e.jsx(s.InlineCode,{children:"body"})," (often JSON)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"When to use:"})," load or send data to REST/GraphQL APIs, upload files, download assets, and call your own backend routes."]})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Minimal GET request"}),e.jsx(s.Pre,{children:`async function loadUsers() {
  const res = await fetch("https://api.example.com/users?limit=10");
  if (!res.ok) {
    // res.ok is true for 2xx status codes
    throw new Error(\`HTTP \${res.status} \${res.statusText}\`);
  }
  const data = await res.json(); // parse body as JSON
  return data;                   // array of users, for example
}`}),e.jsxs(s.Small,{children:[e.jsx("b",{children:"Key idea:"})," ",e.jsx(s.InlineCode,{children:"fetch"})," only rejects the promise on",e.jsx("i",{children:"network failures"}),". HTTP errors (e.g., 404/500) still resolve — check"," ",e.jsx(s.InlineCode,{children:"res.ok"}),"/",e.jsx(s.InlineCode,{children:"res.status"}),"."]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Parsing the response body"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsxs("b",{children:[e.jsx(s.InlineCode,{children:"response.json()"}),":"]})," parse JSON payload into a JS value."]}),e.jsxs("li",{children:[e.jsxs("b",{children:[e.jsx(s.InlineCode,{children:"response.text()"}),":"]})," get raw text (HTML, CSV, plain text)."]}),e.jsxs("li",{children:[e.jsxs("b",{children:[e.jsx(s.InlineCode,{children:"response.blob()"}),":"]})," binary data (images/files) as a"," ",e.jsx(s.InlineCode,{children:"Blob"}),"."]}),e.jsxs("li",{children:[e.jsxs("b",{children:[e.jsx(s.InlineCode,{children:"response.arrayBuffer()"}),":"]})," low-level binary buffer for custom parsing."]})]}),e.jsx(s.Pre,{children:`// Example: download an image as a Blob
const res = await fetch("/avatar.png");
const blob = await res.blob();
const url = URL.createObjectURL(blob);
document.querySelector("img").src = url;`})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"POST with JSON"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Content-Type:"})," tells the server how to interpret the body. For JSON use"," ",e.jsx(s.InlineCode,{children:"application/json"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Accept:"})," what response types you can handle (often"," ",e.jsx(s.InlineCode,{children:"application/json"}),")."]})]}),e.jsx(s.Pre,{children:`async function createUser(user) {
  const res = await fetch("https://api.example.com/users", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Accept": "application/json"
    },
    body: JSON.stringify(user),
  });

  if (!res.ok) throw new Error(\`HTTP \${res.status}\`);
  return res.json(); // new user
}

// Usage:
// const newUser = await createUser({ name: "Ashish", email: "a@b.com" });`})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Error handling"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Network error:"})," DNS down, offline, CORS blocked → the promise ",e.jsx("i",{children:"rejects"})," and you catch in ",e.jsx(s.InlineCode,{children:"try/catch"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"HTTP error:"})," server returned 4xx/5xx → the promise ",e.jsx("i",{children:"resolves"})," but"," ",e.jsx(s.InlineCode,{children:"res.ok"})," is ",e.jsx("i",{children:"false"}),". Throw manually after checking status."]})]}),e.jsx(s.Pre,{children:`async function safeFetch(url) {
  try {
    const res = await fetch(url);
    if (!res.ok) {
      // server responded with an error status
      const problem = await res.text();
      throw new Error(\`HTTP \${res.status}: \${problem}\`);
    }
    return await res.json();
  } catch (err) {
    // network/CORS/parse errors end up here
    console.error("Request failed:", err);
    throw err;
  }
}`})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Useful request options"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsxs("b",{children:[e.jsx(s.InlineCode,{children:"method"}),":"]})," HTTP verb (",e.jsx("i",{children:"GET, POST, PUT, PATCH, DELETE"}),")."]}),e.jsxs("li",{children:[e.jsxs("b",{children:[e.jsx(s.InlineCode,{children:"headers"}),":"]})," metadata like"," ",e.jsx(s.InlineCode,{children:"Authorization"}),","," ",e.jsx(s.InlineCode,{children:"Content-Type"}),","," ",e.jsx(s.InlineCode,{children:"Accept"}),"."]}),e.jsxs("li",{children:[e.jsxs("b",{children:[e.jsx(s.InlineCode,{children:"body"}),":"]})," request payload (string, FormData, Blob, etc.)."]}),e.jsxs("li",{children:[e.jsxs("b",{children:[e.jsx(s.InlineCode,{children:"credentials"}),":"]})," ",e.jsx(s.InlineCode,{children:'"omit"'})," (default),"," ",e.jsx(s.InlineCode,{children:'"same-origin"'}),","," ",e.jsx(s.InlineCode,{children:'"include"'})," to send cookies/auth."]}),e.jsxs("li",{children:[e.jsxs("b",{children:[e.jsx(s.InlineCode,{children:"mode"}),":"]})," ",e.jsx(s.InlineCode,{children:'"cors"'}),","," ",e.jsx(s.InlineCode,{children:'"no-cors"'}),","," ",e.jsx(s.InlineCode,{children:'"same-origin"'})," (controls cross-origin behavior)."]}),e.jsxs("li",{children:[e.jsxs("b",{children:[e.jsx(s.InlineCode,{children:"cache"}),":"]})," ",e.jsx(s.InlineCode,{children:'"default"'}),","," ",e.jsx(s.InlineCode,{children:'"no-store"'}),","," ",e.jsx(s.InlineCode,{children:'"reload"'}),","," ",e.jsx(s.InlineCode,{children:'"no-cache"'}),","," ",e.jsx(s.InlineCode,{children:'"force-cache"'}),","," ",e.jsx(s.InlineCode,{children:'"only-if-cached"'}),"."]}),e.jsxs("li",{children:[e.jsxs("b",{children:[e.jsx(s.InlineCode,{children:"redirect"}),":"]})," ",e.jsx(s.InlineCode,{children:'"follow"'})," (default),"," ",e.jsx(s.InlineCode,{children:'"error"'}),","," ",e.jsx(s.InlineCode,{children:'"manual"'}),"."]}),e.jsxs("li",{children:[e.jsxs("b",{children:[e.jsx(s.InlineCode,{children:"signal"}),":"]})," cancel with"," ",e.jsx(s.InlineCode,{children:"AbortController"})," (covered in the next topic)."]})]}),e.jsx(s.Pre,{children:`// Example: authenticated GET bypassing cache
const res = await fetch("/api/profile", {
  headers: { Authorization: "Bearer <token>" },
  cache: "no-store"
});`})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"CORS (Cross-Origin Resource Sharing) — the 1-minute version"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Same-origin policy:"})," the browser restricts scripts from reading responses from a different",e.jsx("i",{children:"origin"})," (scheme + host + port) unless the server explicitly allows it."]}),e.jsxs("li",{children:[e.jsx("b",{children:"CORS:"})," a server opt-in via headers like"," ",e.jsx(s.InlineCode,{children:"Access-Control-Allow-Origin"})," that permit cross-origin reads."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Preflight:"})," for non-simple requests (custom headers, JSON POST, etc.) the browser sends an"," ",e.jsx(s.InlineCode,{children:"OPTIONS"})," check first."]})]}),e.jsxs(s.Small,{children:["If you see CORS errors in DevTools, fix them ",e.jsx("i",{children:"on the server"})," (configure allowed origins/headers/methods)."]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Basic caching concepts"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"HTTP cache:"})," the browser can store successful GET responses and reuse them based on",e.jsx(s.InlineCode,{children:"Cache-Control"}),", ",e.jsx(s.InlineCode,{children:"ETag"}),", and"," ",e.jsx(s.InlineCode,{children:"Last-Modified"})," headers from the server."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Client overrides:"})," request ",e.jsx(s.InlineCode,{children:"cache"})," option can bypass or prefer cache (",e.jsx(s.InlineCode,{children:'"no-store"'})," to skip completely)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"App-level caching:"})," libraries like SWR or TanStack Query add deduping, caching, invalidation, and background revalidation (covered later in this section)."]})]}),e.jsx(s.Pre,{children:`// Force a fresh fetch, ignoring the HTTP cache:
await fetch("/api/items", { cache: "no-store" });`})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Performance & UX tips"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Don't refetch on every render:"})," put side-effect fetches inside ",e.jsx(s.InlineCode,{children:"useEffect"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Debounce search inputs:"})," wait a bit before querying as the user types."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Batch concurrent requests:"})," use ",e.jsx(s.InlineCode,{children:"Promise.all"})," when possible."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Show clear states:"})," ",e.jsx("i",{children:"loading"}),", ",e.jsx("i",{children:"error"}),", ",e.jsx("i",{children:"empty"}),", ",e.jsx("i",{children:"success"}),' (details in "Loading & Error States").']})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Do & Don't"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," check ",e.jsx(s.InlineCode,{children:"res.ok"})," and parse with the right method."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," send the correct ",e.jsx(s.InlineCode,{children:"Content-Type"})," and ",e.jsx(s.InlineCode,{children:"Accept"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," handle both network and HTTP errors."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," log tokens or secrets; keep them in headers/env."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," rely on defaults you don't control; be explicit."]})]})]}),e.jsxs(s.Section,{children:[e.jsx(s.H2,{children:"Glossary"}),e.jsxs(s.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"URL:"})," address of a resource (scheme, host, path, query, hash)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Method:"})," action to perform (GET = read, POST = create, PUT/PATCH = update, DELETE = remove)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Status code:"})," numeric result of the request (2xx success, 3xx redirect, 4xx client error, 5xx server error)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Headers:"})," key–value metadata sent with a request/response."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Body:"})," payload of a request/response (JSON, text, form-data, binary)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"CORS:"})," server-controlled mechanism to allow cross-origin access."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Cache:"})," storage of responses to speed up subsequent requests."]})]})]}),e.jsxs(s.Callout,{children:["Summary: Use ",e.jsx(s.InlineCode,{children:"fetch"})," to request data, check"," ",e.jsx(s.InlineCode,{children:"res.ok"}),", parse with the correct method, handle both HTTP and network errors, and be explicit with headers and options. We'll cover cancellation next with"," ",e.jsx("i",{children:"AbortController"}),", and then robust loading/error states and caching libraries."]})]});export{i as default};
