import{j as e}from"./index-DUO2rjrc.js";import{S as i}from"./styled-CBN73NgU.js";const s=()=>e.jsxs(i.Page,{children:[e.jsx(i.Title,{children:"Vercel (Deploying a Vite + React App)"}),e.jsxs(i.Lead,{children:[e.jsx("b",{children:"Vercel"})," is a cloud platform that builds and hosts websites from your repository. For a Vite + React Single-Page App (SPA), Vercel serves your static build output from a global CDN and lets you add features like preview deployments, custom domains, and environment variables per environment."]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"What is Vercel?"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Platform:"})," A hosting service that automatically ",e.jsx("i",{children:"builds"})," your project and",e.jsx("i",{children:"deploys"})," it to a fast global CDN."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Build:"})," A reproducible step that runs your package scripts (e.g.,"," ",e.jsx(i.InlineCode,{children:"npm run build"}),") to generate a"," ",e.jsx(i.InlineCode,{children:"dist/"})," folder ready for hosting."]}),e.jsxs("li",{children:[e.jsx("b",{children:"CDN (Content Delivery Network):"})," A network of servers around the world that cache and serve your static files (HTML/CSS/JS) quickly to users."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Preview Deployment:"})," A unique URL created for every pull request/branch so you can test changes before merging."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Production Deployment:"})," The live, public version assigned to your main branch or a specific deployment."]})]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Project prerequisites (Vite + React)"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:["Ensure you can build locally:"," ",e.jsx(i.InlineCode,{children:"npm run build"})," → generates"," ",e.jsx(i.InlineCode,{children:"dist/"}),"."]}),e.jsxs("li",{children:["SPA routing: your app uses ",e.jsx(i.InlineCode,{children:"react-router"}),". You'll add a",e.jsx("b",{children:"rewrite"})," rule so Vercel serves ",e.jsx(i.InlineCode,{children:"index.html"})," for all routes."]}),e.jsxs("li",{children:["Environment variables must be prefixed with"," ",e.jsx(i.InlineCode,{children:"VITE_"})," to be exposed to the browser."]})]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Ways to deploy to Vercel"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Git-based (recommended):"})," Connect your GitHub repo in the Vercel dashboard. Every push triggers a build and a new Preview; merging to the main branch creates a Production deployment."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Vercel CLI:"})," Install the CLI (",e.jsx(i.InlineCode,{children:"npm i -g vercel"}),") and run"," ",e.jsx(i.InlineCode,{children:"vercel"})," (Preview) or"," ",e.jsx(i.InlineCode,{children:"vercel --prod"})," (Production) from your project folder."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Manual upload:"})," Build locally and use the dashboard to upload the"," ",e.jsx(i.InlineCode,{children:"dist/"})," folder (less common for teams)."]})]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Build & output settings (Vite)"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Build command:"})," ",e.jsx(i.InlineCode,{children:"npm run build"})]}),e.jsxs("li",{children:[e.jsx("b",{children:"Output directory:"})," ",e.jsx(i.InlineCode,{children:"dist"})]}),e.jsxs("li",{children:[e.jsx("b",{children:"Install command:"})," ",e.jsx(i.InlineCode,{children:"npm install"})," (Vercel picks this automatically)."]})]}),e.jsx(i.Pre,{children:`// package.json (typical for Vite)
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  }
}`})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"SPA routing (serve index.html for all routes)"}),e.jsx(i.List,{children:e.jsxs("li",{children:["A ",e.jsx("b",{children:"rewrite"})," tells Vercel to serve ",e.jsx(i.InlineCode,{children:"/index.html"})," for any path that doesn't match a static file. This is required for React Router to handle client-side routes like"," ",e.jsx(i.InlineCode,{children:"/about"})," or"," ",e.jsx(i.InlineCode,{children:"/dashboard/settings"}),"."]})}),e.jsx(i.Pre,{children:`// vercel.json (put this at the project root)
{
  "rewrites": [
    { "source": "/(.*)", "destination": "/index.html" }
  ]
}`}),e.jsx(i.Small,{children:"Tip: If you later add API routes or serverless functions, place specific routes above this catch-all rewrite."})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Environment variables (Development, Preview, Production)"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:["Vercel has three environments: ",e.jsx("b",{children:"Development"})," (local), ",e.jsx("b",{children:"Preview"})," (PRs/branches),"," ",e.jsx("b",{children:"Production"})," (main/live)."]}),e.jsxs("li",{children:["Frontend vars must start with ",e.jsx(i.InlineCode,{children:"VITE_"})," (e.g.,"," ",e.jsx(i.InlineCode,{children:"VITE_API_URL"}),"). Define them in Vercel → Project Settings → Environment Variables and choose which environments they apply to."]}),e.jsxs("li",{children:["You can still keep ",e.jsx(i.InlineCode,{children:".env"})," files locally:",e.jsx(i.InlineCode,{children:".env"}),","," ",e.jsx(i.InlineCode,{children:".env.development"}),","," ",e.jsx(i.InlineCode,{children:".env.production"}),"."]})]}),e.jsx(i.Pre,{children:`// Using an env var in code
const api = import.meta.env.VITE_API_URL; // read at build time
`}),e.jsx(i.Small,{children:"Changes to env vars require a new deployment to take effect (values are injected at build time)."})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Cache-Control for better performance"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:["Cache static assets (hashed files) aggressively to speed up repeat visits. Use"," ",e.jsx(i.InlineCode,{children:"immutable"})," for files with content hashes."]}),e.jsxs("li",{children:["Keep ",e.jsx(i.InlineCode,{children:"index.html"})," lightly cached (or no-cache) so new deployments are picked up quickly."]})]}),e.jsx(i.Pre,{children:`// vercel.json (headers example)
{
  "headers": [
    {
      "source": "/assets/(.*)",
      "headers": [
        { "key": "Cache-Control", "value": "public, max-age=31536000, immutable" }
      ]
    },
    {
      "source": "/index.html",
      "headers": [
        { "key": "Cache-Control", "value": "no-cache" }
      ]
    }
  ]
}`})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Custom domains"}),e.jsxs(i.List,{children:[e.jsx("li",{children:"Add your domain in Vercel → Project Settings → Domains. Vercel provides step-by-step DNS records (CNAME/A) to point your domain to the deployment."}),e.jsxs("li",{children:["Once verified, your Production deployment will be served from your domain (e.g.,"," ",e.jsx(i.InlineCode,{children:"https://yourname.dev"}),")."]})]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Logs & monitoring"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Deployment logs:"})," See build output and errors in the Vercel dashboard."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Request logs (for functions):"})," If you add serverless/edge functions, Vercel shows invocation logs and errors."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Frontend monitoring:"})," Add a client-side tool (e.g., Sentry) for error tracking and performance metrics in the browser."]})]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Common errors & how to fix them"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Blank page / routing 404s:"})," Add the SPA rewrite so all routes serve"," ",e.jsx(i.InlineCode,{children:"index.html"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Env variable undefined:"})," Make sure it's defined in Vercel, prefixed with"," ",e.jsx(i.InlineCode,{children:"VITE_"}),", and redeploy after changes."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Wrong output dir:"})," Set output to ",e.jsx(i.InlineCode,{children:"dist"})," (Vite default)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Mixed content (HTTP/HTTPS):"})," Use HTTPS URLs for APIs/assets to avoid browser blocking."]})]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Quick checklist (copy/paste)"}),e.jsx(i.Pre,{children:`- [ ] Project builds locally (npm run build → dist/)
- [ ] vercel.json with SPA rewrites
- [ ] Cache-Control for assets (immutable) and index.html (no-cache)
- [ ] VITE_* env vars configured per environment
- [ ] Custom domain added and DNS verified
- [ ] Smoke test: open Preview URL and navigate through routes
- [ ] Promote to Production (merge or vercel --prod)`})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Do & Don't"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," keep ",e.jsx(i.InlineCode,{children:"index.html"})," minimally cached."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," use ",e.jsx(i.InlineCode,{children:"VITE_"})," prefix for browser-exposed env vars."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Do"})," rely on Preview deployments for QA before merging."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," hardcode environment URLs in code—read from env vars."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Don't"})," place secrets in the repo—store them as Vercel env vars."]})]})]}),e.jsxs(i.Section,{children:[e.jsx(i.H2,{children:"Glossary"}),e.jsxs(i.List,{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Rewrite:"})," Server rule that changes the destination file served for a request (e.g., send every path to ",e.jsx(i.InlineCode,{children:"index.html"})," for SPAs)."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Headers:"})," Key/value metadata sent with responses (e.g.,"," ",e.jsx(i.InlineCode,{children:"Cache-Control"}),")."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Preview:"})," A temporary deployment for a feature branch or PR."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Production:"})," The live deployment tied to your main branch or promoted build."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Immutable:"})," A cache hint telling browsers/CDNs a file will never change at this URL."]})]})]}),e.jsx(i.Callout,{children:"Summary: connect your repo, ensure a clean Vite build, add SPA rewrites, configure per-env variables, and set cache headers. Use Preview deployments to test confidently, then promote to Production and add your custom domain."})]});export{s as default};
